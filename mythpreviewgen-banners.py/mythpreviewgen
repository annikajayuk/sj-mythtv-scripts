#!/usr/bin/python

### Settings

## use_generic_banner: whether to use a generic programme banner if no banner 
#    specific to the programme's season can be found. This uses the same logic 
#    as MythTV, i.e. it uses the *highest* season. However, be aware that 
#    MythTV then might not try to generate the image again for some time.
## default: False
use_generic_banner = False

## use_transparent_image: whether to use a transparent .png when no banner can 
#    be found. Set this to True if you get odd looking images in the recordings 
#    list, but be aware that MythTV then might not try to generate the image 
#    again for some time.
## default: False
use_transparent_image = False

### END OF SETTINGS



import sys, logging
LOG_FILENAME = '/tmp/mythpreviewgen.py.log'
try:
    logging.basicConfig(filename=LOG_FILENAME,level=logging.DEBUG)
    logger = logging.getLogger('mythpreviewgen')
except:
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger('mythpreviewgen')
    logger.debug('unable to open log file: %s, using stdout' % (LOG_FILENAME))
logger.debug('mythpreviewgen started with args: %s' % (sys.argv))

from MythTV import MythDB, datetime
import subprocess
from operator import attrgetter
import argparse

db = MythDB()
parser = argparse.ArgumentParser()


parser.add_argument("--chanid", required=True, help="chanid of the recording to generate a previewbanner for, ex: 1004")
parser.add_argument("--starttime", required=True, help="starttime of the recording to generate a previewbanner for, ex: 20140513165900")
# parser.add_argument("--infile", help="filename of the recording to generate a previewbanner for")
parser.add_argument("--outfile", help="the previewbanner output filename")

args, args_unknown = parser.parse_known_args()

# get the recording
rec = None
if args.chanid is not None and args.starttime is not None:
    for r in db.searchRecorded(chanid=args.chanid, starttime=datetime.frommythtime(args.starttime, tz='Etc/UTC')):
        rec = r
else:
    logger.error('ABORT: both --chanid and --starttime must be provided')
    sys.exit(1)

if rec is None:
    logger.error('ABORT: Unable to find a recording')
    sys.exit(1)


# get the recording filename
recfilename = None
try:
    recfile = rec.open()
    recfilename = recfile.name
    recfile.close()
except:
    logger.error('ABORT: Unable to open recording (file may not be local)')
    try:
        recfile.close()
    except:
        pass
    sys.exit(1)


# try to get the banner filename
bannerfilename = None
try:
    bannerfile = rec.artwork.banner.open()
    bannerfilename = bannerfile.name
    bannerfile.close()
except:
    logger.debug('Unable to open specific season banner (recording has no banner, file does not exist, or is not local)')
    try:
        bannerfile.close()
    except:
        pass

# try to get a generic banner filename
if bannerfilename is None and use_generic_banner is True:
    logger.debug('Trying to use generic programme banner')
    if rec.inetref != '':
        try:
            generic_artworks = sorted(list(db.searchArtwork(inetref=rec.inetref)), key=attrgetter('season'), reverse=True)
            for artwork in generic_artworks:
                try:
                    bannerfile = artwork.banner.open()
                    bannerfilename = bannerfile.name
                    bannerfile.close()
                    break
                except:
                    try:
                        bannerfile.close()
                    except:
                        pass
        except:
            pass
    if bannerfilename is None:
        logger.debug('Could not find generic banner')


if bannerfilename is None and use_transparent_image is True:
    logger.debug('Unable to find banner, using transparent image')
    bannerfilename = 'canvas:transparent'
    recfile.close()
elif bannerfilename is None:
    logger.error('ABORT: Unable to find banner')
    recfile.close()
    sys.exit(0)


# set the output filename
outfilename = args.outfile
if outfilename is None and recfilename is not None:
    outfilename = recfilename + '.png'

if outfilename is None:
    logger.error('ABORT: Unable to determine output filename')
    sys.exit(1)


# generate the previewbanner
try:
    subprocess.check_output(['convert', bannerfilename, outfilename], stderr=subprocess.STDOUT)
    logger.debug('SUCCESS: mythpreviewgen finished, %s saved to %s' % (bannerfilename, outfilename))
except subprocess.CalledProcessError as e:
    logger.error('error %s running convert (%s):' % (e.returncode, e.cmd))
    logger.error(' ' + str(e.output))

